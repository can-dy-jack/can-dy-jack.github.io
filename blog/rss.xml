<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>陈科衡的最新个人博客 Blog</title>
        <link>https://kartjim.cn /blog</link>
        <description>陈科衡的最新个人博客 Blog</description>
        <lastBuildDate>Sat, 20 Aug 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Promises/A+ 规范]]></title>
            <link>https://kartjim.cn /blog/js-promise</link>
            <guid>js-promise</guid>
            <pubDate>Sat, 20 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Promises/A+ 规范(翻译)]]></description>
            <content:encoded><![CDATA[<p>以下翻译自官网：<a href="https://promisesaplus.com/" target="_blank" rel="noopener noreferrer">promisesaplus.com/</a></p><p><code>Promise</code> 代表异步操作的最终结果。与 <code>Promise</code> 交互的主要方式是通过其 <code>then</code> 方法，该方法注册回调以接收 <code>Promise</code> 的最终值或 <code>Promise</code> 失败的原因。</p><p>该规范详细说明了 <code>then</code> 方法的行为，提供了一个可互操作的基础，所有符合 <code>Promises/A+</code> 的 <code>Promise</code> 实现都可以依赖该基础来提供。因此，规范应该被认为是非常稳定的。尽管 <code>Promises/A+</code> 组织可能偶尔会通过微小的向后兼容更改来修改此规范以解决新发现的极端情况，但只有在仔细考虑、讨论和测试后，我们才会集成大的或向后不兼容的更改。</p><p>最后，核心 <code>Promises/A+</code> 规范不涉及如何创建、履行或拒绝 <code>Promise</code>，而是选择专注于提供可互操作的 <code>then</code> 方法。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="1术语">1、术语<a class="hash-link" href="#1术语" title="Direct link to heading">​</a></h2><ul><li><code>promise</code> 是具有 <code>then</code> 方法的<strong>对象或函数</strong>，其行为符合本规范。</li><li><code>thenable</code>是定义 <code>then</code> 方法的对象或函数。</li><li><code>value</code>是任何合法的 <code>JavaScript</code> 值（包括 <code>undefined</code>、<code>thenable</code> 或 <code>promise</code>）。</li><li><code>exception</code>是使用 <code>throw</code> 语句抛出的值。</li><li><code>reason</code> 是一个值，表示一个 <code>promise</code> 被拒绝的原因。</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="2要求">2、要求<a class="hash-link" href="#2要求" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="promise-状态">Promise 状态<a class="hash-link" href="#promise-状态" title="Direct link to heading">​</a></h3><blockquote><p><code>Promise</code> 必须处于以下三种状态之一： <code>pending</code>, <code>fulfilled</code>, or <code>rejected</code>。·</p></blockquote><ol><li>处于 <code>pending</code> 状态时，<code>Promise</code> 可以转换到<code>fulfilled</code> 或 <code>rejected</code> 状态。</li><li>处于 <code>fulfilled</code> 状态时，<code>Promise</code> 不得转换到其它状态。<ul><li>必须有一个<code>value</code>，并且这个值一定不能改变。</li></ul></li><li>处于 <code>rejected</code> 状态时，<code>Promise</code> 不得转换到其它状态。<ul><li>必须有一个<code>reason</code>，并且这个值一定不能改变。</li></ul></li></ol><p>这里的不得转换意味着其不可变的属性（即 <code>===</code>），但并不意味着深度不变（深度嵌套的值可变）。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="then-方法"><code>then</code> 方法<a class="hash-link" href="#then-方法" title="Direct link to heading">​</a></h3><p><code>Promise</code> 必须提供 <code>then</code> 方法来访问其当前或最终的 <code>value</code>或 <code>reason</code>。
<code>Promise</code> 的 <code>then</code> 方法接受两个参数：</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">promise</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">onFulfilled</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> onRejected</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p><code>onFulfilled</code> 和 <code>onRejected</code> 都是可选参数，并且如果它们不是函数，则必须忽略它。</p><ul><li>如果 <code>onFulfilled</code> 是一个函数<ul><li>它必须在 <code>promise</code> 完成后调用，<code>promise</code> 的 <code>value</code> 作为它的第一个参数</li><li>在 <code>promise</code> 完成之前不能调用它</li><li>不能多次调用它。</li></ul></li><li>如果 <code>onRejected</code> 是一个函数<ul><li>它必须在 <code>promise</code> 被拒绝后调用，<code>promise</code> 的 <code>reason</code> 是它的第一个参数</li><li>在 <code>promise</code> 被拒绝之前不能调用它</li><li>不能多次调用它</li></ul></li><li>在执行 <a href="https://es5.github.io/#x10.3" target="_blank" rel="noopener noreferrer"><code>execution context</code></a> 堆栈（仅包含平台代码）之前，不得调用 <code>onFulfilled</code> 或 <code>onRejected</code>。<!-- -->[注意事项第一点]</li><li><code>onFulfilled</code> 和 <code>onRejected</code> 必须作为函数调用（即没有 <code>this</code> 值）。<!-- -->[注意事项第二点]</li><li><code>then</code> 可能会在同一个 <code>Promise</code> 上被多次调用<ul><li>当 <code>Promise</code> 被实现，所有相应的 <code>onFulfilled</code> 回调必须按照它们对 <code>then</code> 的调用顺序执行。</li><li>当 <code>promise</code> 被拒绝时，所有相应的 <code>onRejected</code> 回调必须按照它们对 <code>then</code> 的发起调用的顺序执行。</li></ul></li><li><code>then</code> 必须返回一个 <code>promise</code>[注意事项第三点]<div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">promise2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> promise1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">onFulfilled</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> onRejected</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><ul><li>如果 <code>onFulfilled</code> 或 <code>onRejected</code> 返回一个值 <code>x</code>，运行<code>Promise</code>解决程序 <code>[[Resolve]](promise2, x)</code>。</li><li>如果 <code>onFulfilled</code> 或 <code>onRejected</code> 抛出一个意外 <code>e</code>，<code>promise2</code> 必须以 <code>e</code> 为 <code>reason</code> 被 <code>rejected</code>。</li><li>如果 <code>onFulfilled</code> 不是一个函数并且 <code>promise1</code> 处于 <code>fulfilled</code> 状态，<code>promise2</code> 必须以与 <code>promise1</code> 同样的 <code>value</code> 转变到 <code>fulfilled</code> 状态。</li><li>如果 <code>onRejected</code> 不是一个函数并且 <code>promise1</code> 处于 <code>rejected</code> 状态，<code>promise2</code> 必须以与 <code>promise1</code> 同样的 <code>reason</code> 转变到 <code>rejected</code>状态。</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="promise-解决程序"><code>Promise</code> 解决程序<a class="hash-link" href="#promise-解决程序" title="Direct link to heading">​</a></h3><p><code>promise</code>解决程序是一个抽象的操作，它把一个 <code>promise</code> 和一个 <code>value</code> 作为输入，我们将这个表示为 <code>[[Resolve]](promise, x)</code>。如果 <code>x</code> 是一个 <code>thenable</code> ，它将会试图让 <code>promise</code> 采用 <code>x</code> 的状态，前提是<code>x</code>的行为至少有点像一个 <code>promise</code>。否则，它将会用值 <code>x</code> 执行 <code>promise</code>。
对这些 <code>thenable</code> 的处理使得与 <code>promise</code> 实现方式能够去互相操作。只要它们公开了符合 <code>Promise/A+</code> 的 <code>then</code> 方法。它还使得 <code>promises/A+</code> 实现方式能够采用合理的 <code>then</code> 方法去“同化”不一致的实现方式。
为了运行<code>[[Resolve]](promise, x)</code>，执行以下步骤：</p><ol><li>如果 <code>promise</code> 和 <code>x</code> 指向同一个对象，则以 <code>TypeError</code> 作为原因拒绝 <code>promise</code></li><li>如果 <code>x</code> 是一个 <code>promise</code>，采用它的状态：<!-- -->[注意事项第四点]<ol><li>如果 <code>x</code> 处于<code>pending</code>，则 <code>Promise</code> 必须保持<code>pending</code>，直到 <code>x</code> 变为 <code>fulfilled</code> 或 <code>rejected</code></li><li>当 <code>x</code> 是 <code>fulfilled</code>，使用相同的 <code>value</code> 实现 <code>promise</code></li><li>当 <code>x</code> 是 <code>rejected</code>，以同样的 <code>reason</code> 拒绝 <code>promise</code></li></ol></li><li>除此之外，如果 <code>x</code> 是一个对象或函数<ol><li>令 <code>then</code> 为 <code>x.then</code>[注意事项第五点]</li><li>如果检索属性 <code>x.then</code> 导致抛出异常 <code>e</code>，则以 <code>e</code> 为 <code>value</code> 拒绝 <code>promise</code></li><li>如果 <code>then</code> 是一个函数，则使用 <code>x</code> 作为 <code>this</code>、第一个参数 <code>resolvePromis</code>e 和第二个参数 <code>rejectPromise</code> 调用它，其中：<ul><li>使用 <code>value</code> <code>y</code> 调用 <code>resolvePromise</code> 时，运行 <code>[[Resolve]](promise, y)</code></li><li>使用 <code>reason</code> <code>r</code> 调用 <code>rejectPromise</code> 时，使用 <code>r</code> 拒绝 <code>promise</code></li><li>如果同时调用了 <code>resolvePromise</code> 和 <code>rejectPromise</code>，或者对同一个参数进行了多次调用，则第一次调用优先，并且任何进一步的调用都将被忽略。</li><li>如果调用 <code>then</code> 抛出异常 <code>e</code>:<ul><li>如果已调用 <code>resolvePromise</code> 或 <code>rejectPromise</code>，则忽略它。</li><li>否则，以 <code>e</code> 为 <code>reason</code> 拒绝 <code>promise</code></li></ul></li></ul></li><li>如果 <code>then</code> 不是函数，则用 <code>x</code> 实现 <code>promise</code></li></ol></li><li>如果 <code>x</code> 不是对象或函数，使用 <code>x</code> 实现<code>promise</code></li></ol><p>如果一个参与了 <code>thenable</code> 循环链的 <code>thenable</code> 去 <code>resolve promise</code>，这样 <code>[[Resolve]](promise, thenable)</code> 的递归性质最终会导致 <code>[[Resolve]](promise, thenable)</code> 会被再次调用，遵循上述算法将会导致无限递归。我们鼓励去实现（但不是必需的）检测这样的递归，并以 <code>TypeError</code> 作为 <code>reason</code> 去 <code>reject Promise</code>。<!-- -->[注意事项第六点]</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="3注意事项">3、注意事项<a class="hash-link" href="#3注意事项" title="Direct link to heading">​</a></h2><div class="admonition admonition-danger alert alert--danger"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>注意事项</h5></div><div class="admonition-content"><ol><li>这里的“平台代码”指的是引擎，环境和 promise 实现代码。实际上，这个要求保证了 <code>onFulfilled</code> 和 <code>onRejected</code> 将会异步执行，在事件循环之后，用一个新的堆栈来调用它。 这可以通过“宏任务”机制（如 <code>settimeout</code>或 <code>setimmediate</code> ）或“微任务”机制（如 <code>mutationobserver</code> 或 <code>process.nextick</code>）来实现。由于 <code>Promise</code> 实现被视为平台代码，因此它本身可能包含一个任务调度队列或“<code>trampoline</code>”，并在其中调用处理程序。</li><li>也就是说，在 strict 模式下，这（指的是this）在它们内部将会是 undefined；在普通模式下，它将会是全局对象。</li><li>如果实现满足所有要求，则实现可能允许 <code>promise2 == promise1</code>。每个实现都应该记录它是否能够生成 <code>promise2 == promise1</code> 以及在什么条件下。</li><li>一般来说，只有当 <code>X</code> 来自当前的实现时，才知道它是一个真正的 <code>promise</code>。本条款允许使用特定于实现的方法来采用已知一致承诺的状态。</li><li>此过程首先存储对 x 的引用，然后测试该引用，然后调用该引用，避免多次访问 <code>x.then</code> 属性。这些预防措施对于确保访问器属性的一致性非常重要，访问器属性的值可能在两次检索之间发生更改。</li><li>实现方式中不应当在 <code>thenbale</code> 链中的深度设置主观的限制，并且不应当假设链的深度超过主观的限制后会是无限的。只有真正的循环才能导致<code>TypeError</code>。如果遇到由无限多个不同 <code>thenable</code> 组成的链，那么永远递归是正确的行为。</li></ol></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript技巧之console]]></title>
            <link>https://kartjim.cn /blog/js-console</link>
            <guid>js-console</guid>
            <pubDate>Sat, 25 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[JavaScript技巧之console]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="consolelog">console.log<a class="hash-link" href="#consolelog" title="Direct link to heading">​</a></h2><blockquote><p>向控制台输出一条信息。</p></blockquote><p>语法：</p><ol><li>可以打印一个或多个多个对象</li></ol><div class="codeBlockContainer_I0IT language-javascript theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-javascript codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> info </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">author</span><span class="token operator" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">'jim'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">branch</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'main'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> info2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">author</span><span class="token operator" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">'jim'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">branch</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'main'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">info2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// console.log('info:',info);</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p><img loading="lazy" src="https://img-blog.csdnimg.cn/img_convert/07678ae6cc3ab889a1d8e33d4c05784d.png" alt="log2" class="img_E7b_"></p><ol start="2"><li>使用字符串替换</li></ol><p><strong>控制台输出可以自定义css样式</strong></p><div class="codeBlockContainer_I0IT language-javascript theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-javascript codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%cRed Text"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"color: red"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%cRed Text"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"text-shadow: 1px 1px blue;font-weight: bold;"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%cRed Text"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"font-size: 24px;color:green;"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// console.log("%cRed Text", "font-size: 24px;color:#fff;background-color:blue;");</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p><img loading="lazy" src="https://img-blog.csdnimg.cn/img_convert/4f83fe0c53ce497c264e358f2d1b103b.png" alt="log1" class="img_E7b_"></p><p>！<em>注意，这种方式并不支持所有的css样式</em> ！</p><p>可以控制输出的格式，类似于 <code>python</code> 中的 <code>format</code>
<code>console.log('String: %s, Int: %d,Float: %f, Object: %o', 'str', 2.1, 0.22, info)</code></p><p>参数：</p><table><thead><tr><th align="center">Sub str</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">%o or %O</td><td align="left">打印 JavaScript 对象。在审阅器点击对象名字可展开更多对象的信息。</td></tr><tr><td align="center">%d or %i</td><td align="left">打印整数。支持数字格式化。例如, console.log("Foo %.2d", 1.1) 会输出有先导 0 的两位有效数字: Foo 01。</td></tr><tr><td align="center">%s</td><td align="left">打印字符串。</td></tr><tr><td align="center">%f</td><td align="left">打印浮点数。支持格式化，比如 console.log("Foo %.2f", 1.1) 会输出两位小数: Foo 1.10</td></tr><tr><td align="center">%c</td><td align="left">打印带有css格式的文字</td></tr></tbody></table><ol start="3"><li>还支持变量占位符</li></ol><div class="codeBlockContainer_I0IT language-javascript theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-javascript codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">fill</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">temp的值为: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">temp</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="consoleerror">console.error<a class="hash-link" href="#consoleerror" title="Direct link to heading">​</a></h3><blockquote><p>向 Web 控制台输出一条错误消息。</p></blockquote><p><code>console.exception()</code> 是 <code>console.error()</code> 的别名,它们功能相同,但是<code>console.exception()</code>已经被弃用。</p><ol><li><p>基本使用：向控制台输出错误信息 <code>console.error('error')</code><br>
<img loading="lazy" src="https://img-blog.csdnimg.cn/img_convert/46710b505c55f79d701132d40bd25ea1.png" alt="error" class="img_E7b_"></p></li><li><p>可以给多个参数，会拼接成一个字符串输出： <code>console.error('error','info2')</code></p></li><li><p>可以控制输出格式(<code>%c</code>标示要控制的字符串)<br>
<code>console.error('%cError',"font-size: 24px;")</code><br>
<img loading="lazy" src="https://img-blog.csdnimg.cn/img_convert/a6e4f841325112a2c36a63d9b0c8f3e9.png" alt="error2" class="img_E7b_"></p></li><li><p>你甚至给多个字符串不同的样式：<br>
<code>console.error('%cError %cInformation',"font-size: 24px;","color:blue;") </code><br>
<img loading="lazy" src="https://img-blog.csdnimg.cn/img_convert/664016bac6ce008a54039d9e8302c302.png" alt="error3" class="img_E7b_"></p></li><li><p><code>console.error()</code> 还可以用于输出JavaScript 对象列表，这些对象的字符串形式按顺序加起来然后输出。</p></li></ol><div class="codeBlockContainer_I0IT language-javascript theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-javascript codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> infoA </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">author</span><span class="token operator" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">'jim'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">branch</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'main'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> infoB </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">author</span><span class="token operator" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">'jim2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">branch</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'main2'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> infoC </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">author</span><span class="token operator" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">'jim3'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">branch</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'main3'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">infoA</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">infoB</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">infoC</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p><img loading="lazy" src="https://img-blog.csdnimg.cn/img_convert/ef25bfc41d30545e43c051dfb349e767.png" alt="error4" class="img_E7b_"></p><p>和 <code>console.log()</code> 一样，还可以使用字符串替换:
<code>console.error('String: %s, Int: %d,Float: %f, Object: %o', 'str', 2.1, 0.22, info)</code></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="其它console方法">其它console方法<a class="hash-link" href="#其它console方法" title="Direct link to heading">​</a></h3><ul><li>console.warn()<ul><li>向控制台输出一个警告信息，<code>console.warn()</code> 很常用，使用方法和 <code>console.error</code> 一样。</li></ul></li><li>console.assert()<ul><li>如果断言为false，则将一个错误消息写入控制台。如果断言是 true，没有任何反应。</li><li>例子：<code>console.assert(false, 'your code has %s', 'error')</code></li></ul></li><li>console.clear();<ul><li>清空控制台，并输出信息</li><li>可以省略 <code>console</code> 直接 <code>clear()</code></li></ul></li><li>console.table()<ul><li>打印表格： <code>console.table(['jim','smith','angular'])</code></li></ul></li></ul><p><img loading="lazy" src="https://img-blog.csdnimg.cn/img_convert/5da2b13922accaabf459c196ace71dba.png" alt="table" class="img_E7b_"><br>
<!-- -->打印表格还可以多种花样，可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console/table" target="_blank" rel="noopener noreferrer">MDN</a></p><ul><li>console.group()<ul><li>可以使用嵌套组来把视觉上相关的元素合并，以协助组织你的输出。</li><li>使用console.group()创建新的嵌套块，或者用console.groupCollapsed() 创建默认折叠的块</li><li>这种块需要点击闭合按钮来展开才能读到。</li></ul></li><li><strong>console.time()</strong><ul><li>计算一段特定操作的周期。</li><li>console.time() 方法创建一个计时器，其参数表示了计时器的名字。</li><li>console.timeLog(),输出到现在为止经过的毫秒数;</li><li>console.timeEnd() 方法关闭计时器，并获取经过的毫秒数，同样以计时器的名字作为参数</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="参考文档">参考文档<a class="hash-link" href="#参考文档" title="Direct link to heading">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console/error" target="_blank" rel="noopener noreferrer">MDN-Console/error</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console#outputting_text_to_the_console" target="_blank" rel="noopener noreferrer">MDN-Console</a></li></ul>]]></content:encoded>
        </item>
    </channel>
</rss>